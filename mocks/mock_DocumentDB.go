// Code generated by MockGen. DO NOT EDIT.
// Source: microservice/internal/app/domain (interfaces: DocumentDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "microservice/models"
	reflect "reflect"
)

// MockDocumentDB is a mock of DocumentDB interface
type MockDocumentDB struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentDBMockRecorder
}

// MockDocumentDBMockRecorder is the mock recorder for MockDocumentDB
type MockDocumentDBMockRecorder struct {
	mock *MockDocumentDB
}

// NewMockDocumentDB creates a new mock instance
func NewMockDocumentDB(ctrl *gomock.Controller) *MockDocumentDB {
	mock := &MockDocumentDB{ctrl: ctrl}
	mock.recorder = &MockDocumentDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentDB) EXPECT() *MockDocumentDBMockRecorder {
	return m.recorder
}

// GetDocumentByID mocks base method
func (m *MockDocumentDB) GetDocumentByID(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDocumentByID indicates an expected call of GetDocumentByID
func (mr *MockDocumentDBMockRecorder) GetDocumentByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentByID", reflect.TypeOf((*MockDocumentDB)(nil).GetDocumentByID), arg0, arg1, arg2)
}

// SaveDocument mocks base method
func (m *MockDocumentDB) SaveDocument(arg0 context.Context, arg1 models.Document) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDocument", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDocument indicates an expected call of SaveDocument
func (mr *MockDocumentDBMockRecorder) SaveDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDocument", reflect.TypeOf((*MockDocumentDB)(nil).SaveDocument), arg0, arg1)
}

// Teardown mocks base method
func (m *MockDocumentDB) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown
func (mr *MockDocumentDBMockRecorder) Teardown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockDocumentDB)(nil).Teardown), arg0)
}
