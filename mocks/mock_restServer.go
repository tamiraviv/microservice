// Code generated by MockGen. DO NOT EDIT.
// Source: microservice/internal/app (interfaces: RestServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRestServer is a mock of RestServer interface
type MockRestServer struct {
	ctrl     *gomock.Controller
	recorder *MockRestServerMockRecorder
}

// MockRestServerMockRecorder is the mock recorder for MockRestServer
type MockRestServerMockRecorder struct {
	mock *MockRestServer
}

// NewMockRestServer creates a new mock instance
func NewMockRestServer(ctrl *gomock.Controller) *MockRestServer {
	mock := &MockRestServer{ctrl: ctrl}
	mock.recorder = &MockRestServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestServer) EXPECT() *MockRestServerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRestServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRestServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRestServer)(nil).Start))
}

// Stop mocks base method
func (m *MockRestServer) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRestServerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRestServer)(nil).Stop), arg0)
}
